name: '2.8.5 - Database Initialization'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - prod

env:
  TF_WORKSPACE: ${{ inputs.environment || 'qa' }}

jobs:
  deploy-database-init:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Setup Ansible
      run: |
        pip install ansible

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        token_format: access_token

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="prefix=terraform/state/${{ env.TF_WORKSPACE }}/terraform"

    - name: Terraform Select/Create Workspace
      run: |
        cd terraform
        # The TF_WORKSPACE environment variable already sets the workspace
        # Use terraform workspace show to confirm the workspace is correctly selected
        terraform workspace list
        # No need to manually select since TF_WORKSPACE is already set

    - name: Get Terraform Outputs
      id: tf-outputs
      run: |
        cd terraform
        echo "db_host=$(terraform output -raw database_connection_name)" >> $GITHUB_OUTPUT
        echo "db_name=$(terraform output -raw database_name)" >> $GITHUB_OUTPUT
        echo "db_user=$(terraform output -raw database_user)" >> $GITHUB_OUTPUT
        echo "db_password=$(terraform output -raw database_password)" >> $GITHUB_OUTPUT
        echo "backend_ip=$(terraform output -raw backend_instance_private_ip)" >> $GITHUB_OUTPUT

    - name: Get OS Login SSH Username for Backend
      id: backend-user
      run: |
        BACKEND_SSH_USER=$(gcloud compute os-login describe-profile --format="value(response.posixAccounts.username)" --impersonate-service-account="backend-sa-${{ env.TF_WORKSPACE }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com")
        echo "BACKEND_USER=$BACKEND_SSH_USER" >> $GITHUB_OUTPUT

    - name: Create Ansible Inventory
      run: |
        cat > ansible/inventory/${{ env.TF_WORKSPACE }}_temp.ini << EOF
        [backend]
        ${{ steps.tf-outputs.outputs.backend_ip }} ansible_user=${{ steps.backend-user.outputs.BACKEND_USER }} ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

        [backend:vars]
        ansible_python_interpreter=/usr/bin/python3
        db_connection_name=${{ steps.tf-outputs.outputs.db_host }}
        db_host=127.0.0.1
        db_name=${{ steps.tf-outputs.outputs.db_name }}
        db_user=${{ steps.tf-outputs.outputs.db_user }}
        db_password=${{ steps.tf-outputs.outputs.db_password }}
        EOF

    - name: Run Database Schema Initialization with Ansible
      run: |
        ansible-playbook -i ansible/inventory/${{ env.TF_WORKSPACE }}_temp.ini ansible/playbooks/database_init.yml \
          --extra-vars "db_host=127.0.0.1" \
          --extra-vars "db_name=${{ steps.tf-outputs.outputs.db_name }}" \
          --extra-vars "db_user=${{ steps.tf-outputs.outputs.db_user }}" \
          --extra-vars "db_password=${{ steps.tf-outputs.outputs.db_password }}"
      env:
        ANSIBLE_HOST_KEY_CHECKING: False