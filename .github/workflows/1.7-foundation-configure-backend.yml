name: 1.7 Foundation – Configure Terraform Backend

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: "GCS Bucket Name (leave empty to use TERRAFORM_STATE_BUCKET secret)"
        required: false
      environment:
        description: "Environment (dev / staging / prod)"
        required: false
        default: "dev"

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  configure-terraform-backend:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}

    steps:
    # 0) Checkout
    - uses: actions/checkout@v3

    # 1) Authenticate
    - uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # 2) Install gcloud / gsutil
    - uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        install_components: "gsutil"

    # 3) Quick auth sanity-check
    - name: Verify authentication
      run: |
        gcloud auth list --filter=status:ACTIVE
        gcloud projects describe "$GCP_PROJECT_ID" --format='get(projectId)'

    # 4) Determine bucket name
    - name: Determine bucket name
      run: |
        if [ -n "${{ inputs.bucket_name }}" ]; then
          BN="${{ inputs.bucket_name }}"
        elif [ -n "${{ secrets.TERRAFORM_STATE_BUCKET }}" ]; then
          BN="${{ secrets.TERRAFORM_STATE_BUCKET }}"
        else
          echo "❌ No bucket name provided and TERRAFORM_STATE_BUCKET secret is empty"
          exit 1
        fi
        BN="${BN#gs://}"
        BN="${BN%/}"
        echo "BUCKET_NAME=$BN" >> "$GITHUB_ENV"
        echo "Using bucket: $BN"

    # 5) Check if bucket exists
    - id: check
      name: Check if bucket exists
      run: |
        if gsutil ls "gs://${{ env.BUCKET_NAME }}" >/dev/null 2>&1; then
          echo "Bucket exists"
          echo "::set-output name=exists::true"
        else
          echo "Bucket does not exist"
          echo "::set-output name=exists::false"
        fi

    # 6) Fail if bucket doesn't exist
    - name: Verify bucket exists
      if: steps.check.outputs.exists == 'false'
      run: |
        echo "❌ Bucket gs://${{ env.BUCKET_NAME }} does not exist"
        echo "Please create the bucket first using the 'Create GCS Bucket' workflow"
        exit 1

    # 7) Update Terraform backend configuration
    - name: Update Terraform backend
      run: |
        echo "Updating Terraform backend configuration..."
        
        # Backup original file
        cp terraform/backend.tf terraform/backend.tf.backup
        
        # Update the backend configuration
        sed -i "s/bucket = \"epam-bucket-gcp2025\"/bucket = \"${{ env.BUCKET_NAME }}\"/g" terraform/backend.tf
        
        # If the backend is commented out, uncomment it
        sed -i "s/# backend \"gcs\" {/backend \"gcs\" {/g; s/#     bucket =/    bucket =/g; s/#     prefix =/    prefix =/g; s/# }//g" terraform/backend.tf
        
        echo "Updated backend configuration:"
        cat terraform/backend.tf

    # 8) Initialize Terraform with GCS backend
    - name: Initialize Terraform
      run: |
        echo "Initializing Terraform with GCS backend..."
        cd terraform
        
        # Initialize Terraform with the new backend
        if terraform init -reconfigure; then
          echo "✓ Terraform initialized successfully with GCS backend"
        else
          echo "✗ Terraform initialization failed"
          echo "Restoring backup configuration..."
          cp ../terraform/backend.tf.backup backend.tf
          exit 1
        fi

    # 9) Validate Terraform configuration
    - name: Validate configuration
      run: |
        echo "Validating Terraform configuration..."
        cd terraform
        
        if terraform validate; then
          echo "✓ Terraform configuration is valid"
        else
          echo "✗ Terraform configuration validation failed"
          exit 1
        fi

    # 10) Commit changes
    - name: Commit changes
      run: |
        echo "Committing backend configuration changes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit changes
        git add terraform/backend.tf
        if ! git diff --cached --quiet; then
          git commit -m "Configure Terraform backend to use GCS bucket: ${{ env.BUCKET_NAME }}"
          echo "✓ Configuration changes committed"
        else
          echo "No changes to commit"
        fi

    # 11) Push changes
    - name: Push changes
      run: |
        echo "Pushing changes to repository..."
        git push
        echo "✓ Changes pushed successfully"

    # 12) Final confirmation
    - name: Confirm setup
      run: |
        echo "=== Terraform Backend Configuration ==="
        echo "Bucket: gs://${{ env.BUCKET_NAME }}"
        echo "Project: ${{ secrets.GCP_PROJECT_ID }}"
        echo "✓ Terraform backend configured successfully!"