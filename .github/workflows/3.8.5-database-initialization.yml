name: '2.8.5 - Database Initialization'

on:
  workflow_dispatch:

env:
  TF_WORKSPACE: qa



jobs:
  deploy-database-init:
    runs-on: ubuntu-latest
    environment: qa
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Setup Ansible
      run: |
        pip install ansible

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        token_format: access_token

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="prefix=terraform/state"

    - name: Configure Terraform workspace
      run: |
        cd terraform
        unset TF_WORKSPACE
        terraform workspace select -or-create=true ${{ env.TF_WORKSPACE }}

    - name: Terraform refresh & get outputs
      run: |
        set -euo pipefail
        cd terraform
        terraform init -input=false
        terraform refresh -input=false
        terraform output -json > tfoutputs.json
        
        # Extract and export each output variable
        DB_HOST=$(jq -r '.database_connection_name.value' tfoutputs.json)
        DB_NAME=$(jq -r '.database_name.value' tfoutputs.json)
        DB_USER=$(jq -r '.database_user.value' tfoutputs.json)
        DB_PASSWORD=$(jq -r '.database_password.value' tfoutputs.json)
        BACKEND_IP=$(jq -r '.backend_internal_ip.value' tfoutputs.json)
        
        # Export to environment
        echo "DB_HOST=$DB_HOST" >> "$GITHUB_ENV"
        echo "DB_NAME=$DB_NAME" >> "$GITHUB_ENV"
        echo "DB_USER=$DB_USER" >> "$GITHUB_ENV"
        echo "DB_PASSWORD=$DB_PASSWORD" >> "$GITHUB_ENV"
        echo "BACKEND_IP=$BACKEND_IP" >> "$GITHUB_ENV"
        
        # Print for visibility
        echo "DB_HOST=$DB_HOST"
        echo "DB_NAME=$DB_NAME"
        echo "DB_USER=$DB_USER"
        echo "DB_PASSWORD=<sensitive>"
        echo "BACKEND_IP=$BACKEND_IP"

    - name: Get OS-Login user (show full error)
      run: |
        set -euo pipefail
        set -x
        # Get the OS Login profile to extract user information
        PROFILE_OUTPUT=$(gcloud compute os-login describe-profile \
                         --impersonate-service-account="app-sa-${{ env.TF_WORKSPACE }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com")
        echo "Profile output: $PROFILE_OUTPUT"
        
        # Extract the name field which contains the user ID
        USER_ID=$(echo "$PROFILE_OUTPUT" | grep "^name:" | cut -d"'" -f2)
        echo "User ID: $USER_ID"
        
        # Use the proper OS Login username format for service accounts
        BACKEND_USER="sa_$USER_ID"
        echo "BACKEND_USER=$BACKEND_USER" >> "$GITHUB_ENV"
        echo "Final BACKEND_USER: $BACKEND_USER"

    - name: Create Ansible Inventory
      run: |
        set -euo pipefail  # abort on any unset var or non-zero exit
        
        mkdir -p ansible/inventory
        
        # Get values from environment variables
        # Check if BACKEND_USER is empty and handle appropriately
        if [ -z "$BACKEND_USER" ]; then
          echo "::error ::BACKEND_USER is empty - failed to retrieve OS Login SSH username"
          echo "This may indicate an issue with service account impersonation"
          exit 1
        fi
        
        # Create the inventory file with proper variable substitution
        # Using printf to avoid heredoc indentation issues in YAML
        {
        echo "[backend]"
        echo "$BACKEND_IP ansible_user=$BACKEND_USER ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'"
        echo ""
        echo "[backend:vars]"
        echo "ansible_python_interpreter=/usr/bin/python3"
        echo "db_connection_name=$DB_HOST"
        echo "db_host=127.0.0.1"
        echo "db_name=$DB_NAME"
        echo "db_user=$DB_USER"
        echo "db_password=$DB_PASSWORD"
        } > ansible/inventory/${{ env.TF_WORKSPACE }}_temp.ini


        echo 'Inventory generated:'
        cat ansible/inventory/${{ env.TF_WORKSPACE }}_temp.ini

    - name: Validate Ansible Inventory
      run: |
        set -euo pipefail
        ansible-inventory -i ansible/inventory/${{ env.TF_WORKSPACE }}_temp.ini --list
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

    - name: Run Database Schema Initialization with Ansible
      run: |
        set -euo pipefail
        ansible-playbook -i ansible/inventory/${{ env.TF_WORKSPACE }}_temp.ini ansible/playbooks/database_init.yml \
          --extra-vars "db_host=127.0.0.1" \
          --extra-vars "db_name=$DB_NAME" \
          --extra-vars "db_user=$DB_USER" \
          --extra-vars "db_password=$DB_PASSWORD"
      env:
        ANSIBLE_HOST_KEY_CHECKING: False