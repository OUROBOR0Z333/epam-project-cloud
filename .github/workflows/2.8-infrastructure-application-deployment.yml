name: 2.8-infrastructure-application-deployment.yml

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (qa/prod)'
        required: true
        default: 'qa'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}

jobs:
  application-deployment:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Get Infrastructure Information
        run: |
          echo "Getting infrastructure information..."
          # Get load balancer IP if available
          LB_IP=$(terraform output -raw load_balancer_external_ip 2>/dev/null || echo "localhost")
          echo "LOAD_BALANCER_IP=$LB_IP" >> $GITHUB_ENV
          
          # Get database information if available
          DB_HOST=$(terraform output -raw database_connection_name 2>/dev/null || echo "default-db-host")
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          
          DB_NAME=$(terraform output -raw database_name 2>/dev/null || echo "movie_db")
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          
          DB_USER=$(terraform output -raw database_user 2>/dev/null || echo "app_user")
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          
          DB_PASSWORD=$(terraform output -raw database_password 2>/dev/null || echo "${{ secrets.DB_ROOT_PASSWORD }}")
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Configure SSH for Ansible
        run: |
          mkdir -p ~/.ssh
          # Add known hosts for internal IPs (if we know them)
          # Configure SSH to work with our target hosts
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i localhost, -c local -e "backend_url_var=http://localhost:3000" -e "db_host_var=$DB_HOST" -e "db_name_var=$DB_NAME" -e "db_user_var=$DB_USER" -e "db_password_var=$DB_PASSWORD" playbooks/site.yml
        working-directory: ./ansible