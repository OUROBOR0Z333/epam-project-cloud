name: 2.2 Infrastructure â€“ Complete Deployment

on:
  workflow_dispatch:  # Allows manual triggering

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}

jobs:
  authenticate:
    runs-on: ubuntu-latest
    outputs:
      authenticated: ${{ steps.auth-test.outputs.authenticated }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Test GCP Authentication
        id: auth-test
        run: |
          gcloud auth list
          if gcloud projects describe ${{ secrets.GCP_PROJECT_ID }} > /dev/null 2>&1; then
            echo "authenticated=true" >> $GITHUB_OUTPUT
            echo "Authentication successful"
          else
            echo "Authentication failed"
            exit 1
          fi

  deploy-infrastructure:
    needs: authenticate
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}"
        working-directory: ./terraform

      - name: Terraform Apply
        run: |
          # Attempt to apply with lock cleanup on failure
          set -e
          terraform apply -auto-approve || {
            echo "Terraform apply failed - cleaning up lock file"
            gsutil rm gs://epam-bucket-gcp2025/terraform/state/default.tflock || true
            exit 1
          }
        working-directory: ./terraform
        env:
          TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION }}
          TF_VAR_zone: ${{ secrets.GCP_ZONE }}