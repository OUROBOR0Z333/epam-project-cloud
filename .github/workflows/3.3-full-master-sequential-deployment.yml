name: Master Sequential Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (qa/prod)'
        required: true
        default: 'qa'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}

jobs:
  vpc-creation:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for VPC
        run: |
          terraform plan \
            -target=google_compute_network.custom_vpc \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply VPC
        run: terraform apply tfplan
        working-directory: ./terraform

  subnets-creation:
    runs-on: ubuntu-latest
    needs: vpc-creation
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for Subnets
        run: |
          terraform plan \
            -target=google_compute_subnetwork.public_subnet \
            -target=google_compute_subnetwork.private_subnet \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply Subnets
        run: terraform apply tfplan
        working-directory: ./terraform

  nat-gateway-creation:
    runs-on: ubuntu-latest
    needs: subnets-creation
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for NAT Gateway
        run: |
          terraform plan \
            -target=google_compute_router.router \
            -target=google_compute_router_nat.nat \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply NAT Gateway
        run: terraform apply tfplan
        working-directory: ./terraform

  firewall-security-creation:
    runs-on: ubuntu-latest
    needs: nat-gateway-creation
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for Firewall Rules
        run: |
          terraform plan \
            -target=module.security \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="vpc_id=$(terraform output -state=tfplan.tfstate -raw vpc_id)" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply Firewall Rules
        run: terraform apply tfplan
        working-directory: ./terraform

  compute-instances-creation:
    runs-on: ubuntu-latest
    needs: firewall-security-creation
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for Compute Instances
        run: |
          terraform plan \
            -target=module.bastion \
            -target=module.app_instances \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="private_subnet=$(terraform output -state=tfplan.tfstate -raw private_subnet_id)" \
            -var="public_subnet=$(terraform output -state=tfplan.tfstate -raw public_subnet_id)" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply Compute Instances
        run: terraform apply tfplan
        working-directory: ./terraform

  database-creation:
    runs-on: ubuntu-latest
    needs: [compute-instances-creation]
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for Database
        run: |
          terraform plan \
            -target=module.database \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="vpc_network_id=$(terraform output -state=tfplan.tfstate -raw vpc_id)" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply Database
        run: terraform apply tfplan
        working-directory: ./terraform

  load-balancer-creation:
    runs-on: ubuntu-latest
    needs: [compute-instances-creation, database-creation]
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan for Load Balancer
        run: |
          terraform plan \
            -target=module.load_balancer \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="backend_instance_group=$(terraform output -state=tfplan.tfstate -raw frontend_instance_group)" \
            -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -var="ssh_allowed_ips=${{ secrets.SSH_ALLOWED_IPS }}" \
            -var="frontend_machine_type=e2-micro" \
            -var="backend_machine_type=e2-micro" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply Load Balancer
        run: terraform apply tfplan
        working-directory: ./terraform

  application-deployment:
    runs-on: ubuntu-latest
    needs: [load-balancer-creation, database-creation]
    environment: ${{ inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Get Infrastructure Information
        run: |
          echo "Getting infrastructure information..."
          # Get load balancer IP if available
          LB_IP=$(terraform output -raw load_balancer_external_ip 2>/dev/null || echo "localhost")
          echo "LOAD_BALANCER_IP=$LB_IP" >> $GITHUB_ENV
          
          # Get database information if available
          DB_HOST=$(terraform output -raw database_connection_name 2>/dev/null || echo "default-db-host")
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          
          DB_NAME=$(terraform output -raw database_name 2>/dev/null || echo "movie_db")
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          
          DB_USER=$(terraform output -raw database_user 2>/dev/null || echo "app_user")
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          
          DB_PASSWORD=$(terraform output -raw database_password 2>/dev/null || echo "${{ secrets.DB_ROOT_PASSWORD }}")
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Configure SSH for Ansible
        run: |
          mkdir -p ~/.ssh
          # Add known hosts for internal IPs (if we know them)
          # Configure SSH to work with our target hosts
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i localhost, -c local -e "backend_url_var=http://localhost:3000" -e "db_host_var=$DB_HOST" -e "db_name_var=$DB_NAME" -e "db_user_var=$DB_USER" -e "db_password_var=$DB_PASSWORD" playbooks/site.yml
        working-directory: ./ansible