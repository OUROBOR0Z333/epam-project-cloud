name: Destroy Infrastructure in Default Workspace

on:
  workflow_dispatch:
    inputs:
      auto_approve:
        description: 'Auto approve destruction (use with extreme caution - this will delete infrastructure!)'
        required: true
        default: false
        type: boolean

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}

jobs:
  authenticate:
    runs-on: ubuntu-latest
    outputs:
      authenticated: ${{ steps.auth-test.outputs.authenticated }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Test GCP Authentication
        id: auth-test
        run: |
          gcloud auth list
          if gcloud projects describe ${{ secrets.GCP_PROJECT_ID }} > /dev/null 2>&1; then
            echo "authenticated=true" >> $GITHUB_OUTPUT
            echo "Authentication successful"
          else
            echo "Authentication failed"
            exit 1
          fi

  destroy-default-infrastructure:
    needs: authenticate
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Terraform Backend and Use Default Workspace
        run: |
          cd ./terraform
          
          # Initialize Terraform with existing backend configuration
          terraform init
          
          # Ensure we're using the default workspace where original infrastructure was created
          echo "Current workspaces:"
          terraform workspace list
          
          echo "Switching to default workspace..."
          terraform workspace select default
          
          echo "Found state in default workspace. Preparing to destroy..."
          # List resources that will be destroyed
          terraform plan -destroy -out=tfplan.binary
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION }}
          TF_VAR_zone: ${{ secrets.GCP_ZONE }}
          TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}

      - name: Show Destroy Plan
        run: |
          cd ./terraform
          terraform show -no-color -destroy tfplan.binary

      - name: Terraform Destroy
        if: ${{ inputs.auto_approve == true }}
        run: |
          cd ./terraform
          echo "Starting infrastructure destruction in default workspace..."
          terraform destroy -auto-approve tfplan.binary || {
            echo "Terraform destroy failed - cleaning up lock file"
            gsutil ls gs://epam-bucket-gcp2025/terraform/state/default.tflock && \
            gsutil rm gs://epam-bucket-gcp2025/terraform/state/default.tflock || true
            exit 1
          }
          
          echo "Infrastructure destruction completed in default workspace"
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION }}
          TF_VAR_zone: ${{ secrets.GCP_ZONE }}
          TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}
          
      - name: Warning for Manual Destroy Required
        if: ${{ inputs.auto_approve == false }}
        run: |
          echo "Manual approval required. Destroy plan has been generated but not executed."
          echo "To destroy manually, run: terraform destroy tfplan.binary in the terraform directory"
          echo "WARNING: This will permanently delete infrastructure. Please review the plan details carefully."

      - name: Cleanup Plan File
        if: ${{ always() }}
        run: |
          cd ./terraform
          rm -f tfplan.binary