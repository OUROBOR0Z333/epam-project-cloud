name: Show Current Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to inspect (qa/prod/default)'
        required: true
        default: 'default'
        type: choice
        options:
          - default
          - qa
          - prod

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}

jobs:
  authenticate:
    runs-on: ubuntu-latest
    outputs:
      authenticated: ${{ steps.auth-test.outputs.authenticated }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Test GCP Authentication
        id: auth-test
        run: |
          gcloud auth list
          if gcloud projects describe ${{ secrets.GCP_PROJECT_ID }} > /dev/null 2>&1; then
            echo "authenticated=true" >> $GITHUB_OUTPUT
            echo "Authentication successful"
          else
            echo "Authentication failed"
            exit 1
          fi

  show-infrastructure:
    needs: authenticate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment == 'prod' && 'production' || inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Terraform Backend and Workspace
        run: |
          cd ./terraform
          
          # Initialize Terraform with existing backend configuration
          terraform init
          
          # List existing workspaces
          echo "Current workspaces:"
          terraform workspace list
          
          # Create or select the appropriate workspace
          if terraform workspace list | grep -q "^* ${{ inputs.environment }}$"; then
            echo "Switching to existing workspace: ${{ inputs.environment }}"
            terraform workspace select ${{ inputs.environment }}
          else
            echo "Workspace ${{ inputs.environment }} not found."
            echo "Available workspaces:"
            terraform workspace list
            if [ "${{ inputs.environment }}" = "default" ]; then
              echo "Using default workspace directly"
              terraform workspace select default
            else
              echo "Creating new workspace: ${{ inputs.environment }}"
              terraform workspace new ${{ inputs.environment }}
              exit 0  # Exit without error if creating new workspace
            fi
          fi
          
          # Clear any existing plan files to ensure we're seeing current state
          rm -f tfplan.binary
          
          # Show current infrastructure state
          echo "Current infrastructure state:"
          terraform show -no-color
          
          # List all resources
          echo "Resources in current state:"
          terraform state list
          
          # Show output variables
          echo "Output variables:"
          terraform output -no-color
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION }}
          TF_VAR_zone: ${{ secrets.GCP_ZONE }}
          TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}