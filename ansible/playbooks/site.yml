---
# Ansible playbook for deploying the movie-analyst application

- name: Deploy Backend Application
  hosts: backend
  become: yes
  vars:
    app_user: "app"
    app_group: "app"
    app_dir: "/opt/movie-analyst"
    backend_port: "{{ backend_port | default(3000) }}"
    db_host: "{{ db_host | default('/cloudsql/epamgcpdeployment2:us-central1:movie-db-qa') }}"
    db_name: "{{ db_name | default('movie_db') }}"
    db_user: "{{ db_user | default('app_user') }}"
    db_password: "{{ db_password | default('your_secure_password_here') }}"
  tasks:
    - name: Ensure app group exists
      group:
        name: "{{ app_group }}"
        system: yes
        state: present

    - name: Ensure app user exists
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: yes
        state: present

    - name: Install Node.js and npm
      apt:
        name: 
          - nodejs
          - npm
          - git
        state: present
        update_cache: yes

    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Clone backend application
      git:
        repo: https://github.com/aljoveza/devops-rampup.git
        dest: "{{ app_dir }}/movie-analyst-api"
        force: yes
        depth: 1
      become_user: "{{ app_user }}"
      notify: restart-backend

    - name: Install backend dependencies
      npm:
        path: "{{ app_dir }}/movie-analyst-api/movie-analyst-api"
        state: present
      become_user: "{{ app_user }}"
      notify: restart-backend

    - name: Create backend environment file
      template:
        src: backend.env.j2
        dest: "{{ app_dir }}/movie-analyst-api/movie-analyst-api/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      become_user: "{{ app_user }}"
      notify: restart-backend

    - name: Start backend service with PM2
      command: pm2 start server.js -n movie-analyst-backend --cwd {{ app_dir }}/movie-analyst-api/movie-analyst-api
      become_user: "{{ app_user }}"
      args:
        creates: ~/.pm2/apps.json

    - name: Save PM2 processes
      command: pm2 save
      become_user: "{{ app_user }}"

    - name: Ensure PM2 starts on boot
      command: pm2 startup
      become: yes
      args:
        creates: /etc/systemd/system/pm2-{{ app_user }}.service

  handlers:
    - name: restart-backend
      command: pm2 restart movie-analyst-backend
      become_user: "{{ app_user }}"

- name: Deploy Frontend Application
  hosts: frontend
  become: yes
  vars:
    app_user: "app"
    app_group: "app"
    app_dir: "/opt/movie-analyst"
    frontend_port: "{{ frontend_port | default(3030) }}"
    backend_url: "{{ backend_url | default('http://10.0.2.2:3000') }}"
  tasks:
    - name: Ensure app group exists
      group:
        name: "{{ app_group }}"
        system: yes
        state: present

    - name: Ensure app user exists
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: yes
        state: present

    - name: Install Node.js and npm
      apt:
        name: 
          - nodejs
          - npm
          - git
        state: present
        update_cache: yes

    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Clone frontend application
      git:
        repo: https://github.com/aljoveza/devops-rampup.git
        dest: "{{ app_dir }}/movie-analyst-ui"
        force: yes
        depth: 1
      become_user: "{{ app_user }}"
      notify: restart-frontend

    - name: Install frontend dependencies
      npm:
        path: "{{ app_dir }}/movie-analyst-ui/movie-analyst-ui"
        state: present
      become_user: "{{ app_user }}"
      notify: restart-frontend

    - name: Create frontend environment file
      template:
        src: frontend.env.j2
        dest: "{{ app_dir }}/movie-analyst-ui/movie-analyst-ui/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      become_user: "{{ app_user }}"
      notify: restart-frontend

    - name: Start frontend service with PM2
      command: pm2 start server.js -n movie-analyst-frontend --cwd {{ app_dir }}/movie-analyst-ui/movie-analyst-ui
      become_user: "{{ app_user }}"
      args:
        creates: ~/.pm2/apps.json

    - name: Save PM2 processes
      command: pm2 save
      become_user: "{{ app_user }}"

    - name: Ensure PM2 starts on boot
      command: pm2 startup
      become: yes
      args:
        creates: /etc/systemd/system/pm2-{{ app_user }}.service

  handlers:
    - name: restart-frontend
      command: pm2 restart movie-analyst-frontend
      become_user: "{{ app_user }}"