---
# tasks/main.yml for backend role

# NOTE: App user/group creation is handled in the pre_tasks of the main playbook

- name: Install Node.js and npm
  apt:
    name: 
      - nodejs
      - npm
      - git
    state: present
    update_cache: yes

- name: Install PM2 globally
  npm:
    name: pm2
    global: yes
    state: present

- name: Create application directory
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'

- name: Set Cloud SQL Proxy URL
  set_fact:
    cloud_sql_proxy_url: "https://github.com/GoogleCloudPlatform/cloud-sql-proxy/releases/download/v{{ cloud_sql_proxy_version }}/cloud_sql_proxy.linux.{{ cloud_sql_proxy_arch }}"

- name: Download Cloud SQL Proxy
  get_url:
    url: "{{ cloud_sql_proxy_url }}"
    dest: "{{ cloud_sql_proxy_install_dir }}/cloud-sql-proxy"
    mode: '0755'
    checksum: >-
      {{ (cloud_sql_proxy_sha256 | length > 0)
         | ternary('sha256:' + cloud_sql_proxy_sha256, omit) }}

- name: Install Cloud SQL Proxy service file
  template:
    src: cloud-sql-proxy.service.j2
    dest: /etc/systemd/system/cloud-sql-proxy.service
    owner: root
    group: root
    mode: '0644'
  notify: restart-cloud-sql-proxy

- name: Clone backend application
  git:
    repo: https://github.com/aljoveza/devops-rampup.git
    dest: "{{ app_dir }}/movie-analyst-api"
    force: yes
    depth: 1
  become_user: "{{ app_user }}"

- name: Install backend dependencies
  npm:
    path: "{{ app_dir }}/movie-analyst-api/movie-analyst-api"
    state: present
  become_user: "{{ app_user }}"

- name: Create backend environment file
  template:
    src: backend.env.j2
    dest: "{{ app_dir }}/movie-analyst-api/movie-analyst-api/.env"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  become_user: "{{ app_user }}"

- name: Start Cloud SQL Proxy as a background service
  systemd:
    name: cloud-sql-proxy
    state: started
    enabled: yes
    daemon_reload: yes
  # Create and start the Cloud SQL Proxy service to allow DB connections

- name: Check if PM2 process exists
  command: pm2 describe movie-analyst-backend
  register: pm2_backend_process_exists
  ignore_errors: yes
  changed_when: false
  become_user: "{{ app_user }}"

- name: Start / reload backend with PM2
  command: >
    {{ (pm2_backend_process_exists.rc == 0) | ternary('pm2 reload movie-analyst-backend --update-env', 'pm2 start server.js --name movie-analyst-backend --cwd ' + app_dir + '/movie-analyst-api') }}
  become_user: "{{ app_user }}"
  register: pm2_backend_started
  changed_when: pm2_backend_started.rc == 0